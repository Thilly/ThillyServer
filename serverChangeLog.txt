ChangeLog - Thilly.net V5 - Web Service

12 August 2014 - finishing the functionality of the diag tools

	thillyLogging.js
		implemented most of the memory logging functionality here
		
	diagMap.js
		implemented some handles to access and modify the memory logging
		
	
11 August 2014 - implementing the clientside diagnostic tools

	functionMaps/diagMap.js
		implemented most of the functionality for getting basic diagnostic information
	
	thillyLogging.js
		implemented transmitting logging related information to listening clients
		implemented getting log flags from logging
		implemented changing log flags from client
	
	thillyServer.js
		modified how sockets handle first connection
	

10 August 2014 - working on the contest application some

	build.js
		modified build script slightly to accomodate change in client javascript naming convention
	
	thillyMongo.js
		removed schema comment at bottom moved to own file
	
	resources/mongoSchema.js
		created directory and file for random useful things
		
	challengeMap.js
		implemented content management functions
		implemented initial contest supply functions
		locked down contest from sharing answers and testCases with non-admin, in template and in challenge


9 August 2014 - modified Mongo to handle tabs

	thillyMongo.js
		modified update after I deleted the entire content collection.
	
	contentMap.js
		modified article queries and pushes to accomodate tabs

		
4 August 2014 - modified logins

	userMap.js
		modified login, now goes straight back to socket with reply, for client side callback handling of event and response
		
		
		
3 August 2014 - starting the integration of the programming contest thingy

	serverManager.js
		modified to run based on what is asked
			now only runs live as a service and test is free to be ripped down by me at any time

	thillyChallenge.js->challengeMap.js
		moved to the challengeMap since mostly just catching work from socket
		added the initialization function
		implemented the content serving and submission handles for the socket
			
	build.js
		modified the move script to just transfer everything from a directory
			copies all files over to mirrored place on environment
			until I try and test mongo as a file server

			
2 August 2014 - finally abstracted the function maps out of thillyServer.js

	thillyServer.js
		removed all of the function maps
		implemented a function to build the function maps from each file in the function map directory
	
	thillyChallenge.js
		getting ready to add the challenge into this version of the website
		still deciding how I want it to work
	
	./functionMaps
		created new directory for a place for functionMaps to live
	
		contentMap.js
			the function map with the content related things
			get/update/modify
	
		userMap.js
			the function map with the user related things
			login/logout/register
			

1 August 2014 - completely re-wrote build script, was really kludgy and bad structure
	
	build.js
		ctrl+a del
		started from scratch and made it a bit nicer to work with in the future
			
			
31 July 2014 - added a weak attempt at caching, updated admin.js

	thillyFiles.js
		implemented modified date on the files served
	
	admin.js
		modified to work with new thillyIndex structure


30 July 2014 - changed DNS, webby is officially live
	
	build.js
		modified to be a one or the other deploy script (live/test) to test before pushing broken code
	
	thillyServer.js
		modified to have thilly.net as origin when 'live'
		and 192.168.1.50:8080 as test, only accessible locally, hence private IP :D
	
	thillyLogging.js
		set flags to be mostly hidden except for errors
		

27 July 2014 - couple of bugs before 'release'
	
	thillyFiles.js
		isolated and fixed a bug in regards to submitting more content under different environments
		

26 July 2014 - server manager

	serverManager.js
		implemented a script that launches each environment in their own node instance
		test: port 8080 only private network
		live: port 80 open to public
	
	webService.js -> thillyServer.js
		no longer the parent process, dependency of serverManager.js
		modified slightly to allow to be run from serverManager
		modified dependency paths
	
	logging.js
		modified logging to take into account the environment it's running in

		
25 July 2014 - build script

	build.js
		implemented a build script that creates two environments from source
			test: full non-minified source
			live: minified JS


24 July 2014 - reorganized logging to streamline and allow for extensibility

	logging.js 
		refactored into a named function map for each logging type
		implemented a cache to be able to pull last bit from client/admin
		implemented options for when I move to multiple environments

	/ServerPkgs/
		modified each file to use the new logging structure
		
		
23 July 2014 - more cleanup and preparing for some extending
	
	logging.js	
		implemented a domain flag for setting test/deploy environments
		implemented a set function for changing values during runtime
	
	files.js
		modified to fit above
	
	webservice.js
		modified to fit above
		fixed a bug related to templates and old thumbnails being updated properly
		
	admin.js
		fixed a bug related to templates and old thumbnails being updated properly

		
22 July 2014 - cleaning up some fiddly bits

	general
		removed all static html except for index.html and 404.html
		re-arranged filesystem
		
	webservice.js
		modified how getpages works to get ALL articles without dupes (not in set of pageIDs)
	
	thillyFiles.js
		refactored how filehandler deals with urls a bit
		

21 July 2014 - changing links and adding categories

	webService.js
		modified how getpages works to allow 
			now takes an object { currentCount, category }
		modified how pages are created and stored, allowed to have dupes on dateString
			unique on date/category still (intended for ease of edit)
		modified how pageIDs are served to template
		refactored page ids
		

20 July 2014 - last bit of commenting functionality

	general
		code cleanup and re-arranging
		
	webService.js
		removed the alert from a comment submission since local modifications have been implemented
		implemented points and total user points, because they are just fun
		implemented vote retrieving

		
19 July 2014 - lots of work with mongo finishing up comment functionality

	webService.js
		implemented the voting functionality in three parts
			constructing a 'vote' by checking for existing votes
			recording the user vote for persistence
			recording the points given/taken away from the vote
	
	mongo.js
		changed the schema from the weird nested voting structure to two arrays with up/down votes 
			I want to go back to the nested in the future because I think it will be better for long run.
			

18 July 2014 - comments can be posted now, voting still to come

	webservice.js
		implemented the functionality for publishing a new comment
		implemented the functionality for retrieving the comments
		

17 July 2014 - begin implementing comments
	first pass on server to start viewing comments
	
	webservice.js
		implemented a getComments function to function map
		refactored the exceptions on send/actionCommand

		
30 June 2014 - refactored logins
	to keep the blog content secure the cookies and cached logins were refactored
	
	webservice.js
		refactored login to take a userString in addition to just name/pass
		implemented condition on article push to check for admin
		implemented message to alert user results of article pushed
	
	mongo.js
		implemented a function to get an objectId 'object' back from an objectId string
		

28 June 2014 - template is actually working now
	The template is up and running, first passes and edits are working. I'm sure a few more bugs need to be flushed out but I'll get em.	
	
	webService.js
		implemented article storage and modification
		implemented picture storage and retrieval
	
	mongo.js
		implemented article storage and modification

		
25 June 2014 - Share logged in info with client

	webService.js
		implemented giving the socket(client) it's type and name to hold on to while logged in
		

24 June 2014 - login and crypto additions
setting up server for registering accounts and logging in
	
	mongo.js:
		implemented insert to create/save users
		passwords are hashed and secure
		
	webService.js
		implemented a few more commands to the function map to carry the logic for logging and registering
	
	crypto.js
		implemented very small wrapper for nodes crypto module
			require and call createHash(toBeHashed), very simple API
	
	servedJS
		created new directory for composing JS on the fly to serve to the user based on privlege level
		determined at login, only standard and admin for test at the moment	
	

23 June 2014 - client side work on logins
mostly client stuff on UI
	
	mongo.js
		only added a field to my schema, nothing actually done

		
17 June 2014 - template gogo
Start actually working on the template

	webService.js
		modified page querying again to better serve my implementation
		implemented a few functions to help with the templating
	
	mongo.js
		created a single select function with different composing functions

		
16 June 2014
Lets keep a back button and static linking

	webService.js
		modified page querying to get specific and a range
	
	mongo.js
		modified page querying to get specific and a range


15 June 2014 - mongo is weird and I had no clear plan

after writing one REALLY general avenue, I realized it was opening me up to people just writing their own queries in the JS console...
have to re-write my mongo

	webService.js:
		changed the behavior of how the server works with mongo a little bit in preparation for completely re-writing my mongo
		
	mongo.js:
		realized I had painted myself into a huge security corner, now I have to re-write it
		made a better pseudo idea at the bottom so hopefully I remember my notes and can understand them when I get back to it


14 June 2014 - first query worked

I pushed the two articles I created so far, FAQ and DependencyInjection into mongo just to see if I can query them back out. 
I can and did, it's wonderful to see the pieces fall into place.

	webService.js:
		refactoring the function map for the mongo hooks, will move to their own file/map
		finished writing the general mongo functions, not finished but good enough to move on


13 June 2014 - Implementing mongoDB

Started creating a library that will work as the storage for my CMS, so far pretty nice

	webService.js:
		made the server start up the mongo connection
		added hooks from the actionCommand for mongo interactions
			still need to streamline it, feels really redundant at the moment
		
	
	thillyFiles.js:
		renamed the 'dir' directory to client, so changes were made in the file handler
	
	thillyLogging.js:
		added a flag for mongo, 'logging.mongo'
	
	thillyMongo.js:
		implemented mongoDB connections to thillyNet database
			collections for content, comments, and users
		implemented new module with public functions:
			'getUserVotes','getUserComments','getPageComments','getUser','getPages'		
			'addUser','addComment','addArticle'	
		implemented various private functions as well:
			dateTimeStamp, getComments, DBException, isLogging


8 June 2014 - Start logging development to not loose track of progress

Began trying to make an extensible web service to act as a webServer, fileHandler, and CMS

	webService.js:
		-implemented node(http) to listen for web requests using thillyFiles.fileHandler to serve
		-implemented socket.io to create two way communication (no ajax/PhP)
		-implemented some basic functions I find myself writing again and again
			actionCommand, sendCommand
			
	thillyExceptions.js:
		-implemented basic error handling (place holder ATM)
		
	thillyFiles.js:
		-implemented wrappers with logging around node(fs) library
		-implemented filehandler for most common requests, can be extended for more file types
		
	thillyLogging.js:
		-implemented basic logging object to easily watch certain aspects of the process
		-implemented ability to log out to a file to see what or if anything happened while not watching server
		
	Other:
		Created service to start automatically when server is powered on.